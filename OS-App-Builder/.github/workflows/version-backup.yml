name: Version Backup on Deploy

on:
  push:
    branches: [main, production]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  backup-version:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Get version info
        id: version
        run: |
          echo "VERSION=v$(node -p "require('./package.json').version")-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Create deployment archive
        run: |
          mkdir -p DEPLOYED-VERSIONS/${{ steps.version.outputs.VERSION }}
          
          # Create source archive
          zip -r DEPLOYED-VERSIONS/${{ steps.version.outputs.VERSION }}/source.zip . \
            -x "node_modules/*" \
            -x ".next/*" \
            -x ".git/*" \
            -x "DEPLOYED-VERSIONS/*"
          
          # Save deployment metadata
          cat > DEPLOYED-VERSIONS/${{ steps.version.outputs.VERSION }}/deployment-info.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_commit": "${{ github.sha }}",
            "git_branch": "${{ steps.version.outputs.BRANCH }}",
            "github_run_id": "${{ github.run_id }}",
            "github_actor": "${{ github.actor }}"
          }
          EOF
      
      - name: Create Git tag
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.VERSION }} -m "Auto-tag: ${{ steps.version.outputs.VERSION }}"
          git push origin ${{ steps.version.outputs.VERSION }} || true
      
      - name: Upload version artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-${{ steps.version.outputs.VERSION }}
          path: DEPLOYED-VERSIONS/${{ steps.version.outputs.VERSION }}
          retention-days: 90
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Deployment ${{ steps.version.outputs.VERSION }}
            
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ steps.version.outputs.BRANCH }}
            **Deployed by**: ${{ github.actor }}
            
            ### Deployment Artifacts
            - Source code archive available
            - Deployment metadata saved
            
            ### Recovery
            To restore this version:
            ```bash
            git checkout tags/${{ steps.version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false