#!/bin/bash
# VoiceFly Enterprise - Patch Version Release Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_DIR="backups/versions"
LOG_FILE="logs/system/version-$(date +%Y%m%d-%H%M%S).log"

echo -e "${BLUE}🚀 VoiceFly Enterprise - Patch Version Release${NC}"
echo "=================================================="

# Create log directory if it doesn't exist
mkdir -p logs/system
mkdir -p $BACKUP_DIR

# Start logging
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

echo "📝 Starting patch version release at $(date)"

# Backup current version
echo -e "${YELLOW}📦 Creating backup of current version...${NC}"
CURRENT_VERSION=$(node -p "require('./package.json').version")
BACKUP_NAME="v${CURRENT_VERSION}-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR/$BACKUP_NAME"

# Copy critical files for backup
cp -r apps/ "$BACKUP_DIR/$BACKUP_NAME/" 2>/dev/null || true
cp -r packages/ "$BACKUP_DIR/$BACKUP_NAME/" 2>/dev/null || true
cp -r services/ "$BACKUP_DIR/$BACKUP_NAME/" 2>/dev/null || true
cp package.json "$BACKUP_DIR/$BACKUP_NAME/"
cp turbo.json "$BACKUP_DIR/$BACKUP_NAME/"

echo "✅ Backup created: $BACKUP_DIR/$BACKUP_NAME"

# Run tests before version bump
echo -e "${YELLOW}🧪 Running tests...${NC}"
if ! npm run test; then
    echo -e "${RED}❌ Tests failed! Aborting version release.${NC}"
    exit 1
fi

# Run linting
echo -e "${YELLOW}🔍 Running linter...${NC}"
if ! npm run lint; then
    echo -e "${RED}❌ Linting failed! Aborting version release.${NC}"
    exit 1
fi

# Type checking
echo -e "${YELLOW}📝 Running type check...${NC}"
if ! npm run type-check; then
    echo -e "${RED}❌ Type check failed! Aborting version release.${NC}"
    exit 1
fi

# Build all packages
echo -e "${YELLOW}🏗️ Building all packages...${NC}"
if ! npm run build; then
    echo -e "${RED}❌ Build failed! Aborting version release.${NC}"
    exit 1
fi

# Bump patch version
echo -e "${YELLOW}📈 Bumping patch version...${NC}"
NEW_VERSION=$(npm version patch --no-git-tag-version)
echo "✅ Version bumped to: $NEW_VERSION"

# Update version in all workspace packages
echo -e "${YELLOW}🔄 Updating workspace packages...${NC}"
find apps packages services -name "package.json" -exec sed -i '' "s/\"version\": \".*\"/\"version\": \"${NEW_VERSION#v}\"/" {} \;

# Create git commit
echo -e "${YELLOW}📝 Creating git commit...${NC}"
git add .
git commit -m "chore: release $NEW_VERSION

- Automated patch version bump
- All tests passing
- Build verified
- Backup created: $BACKUP_NAME

🤖 Generated by VoiceFly version script"

# Create git tag
git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"

# Health check after version bump
echo -e "${YELLOW}🏥 Running post-release health check...${NC}"
if command -v ./scripts/maintenance/health-check.sh &> /dev/null; then
    ./scripts/maintenance/health-check.sh
fi

# Update changelog
echo -e "${YELLOW}📋 Updating CHANGELOG.md...${NC}"
if [ ! -f "CHANGELOG.md" ]; then
    echo "# VoiceFly Enterprise Changelog" > CHANGELOG.md
    echo "" >> CHANGELOG.md
fi

cat > temp_changelog.md << EOF
# VoiceFly Enterprise Changelog

## $NEW_VERSION - $(date +%Y-%m-%d)

### Patch Release
- Version bumped from v$CURRENT_VERSION to $NEW_VERSION
- All tests passing ✅
- Build verification completed ✅
- Backup created and stored ✅

$(cat CHANGELOG.md | tail -n +3)
EOF

mv temp_changelog.md CHANGELOG.md

echo -e "${GREEN}✅ Patch version release completed successfully!${NC}"
echo "=================================================="
echo "📦 New version: $NEW_VERSION"
echo "📁 Backup location: $BACKUP_DIR/$BACKUP_NAME"
echo "📝 Log file: $LOG_FILE"
echo "🏷️  Git tag: $NEW_VERSION"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Review the changes: git show $NEW_VERSION"
echo "2. Push to remote: git push origin main && git push origin $NEW_VERSION"
echo "3. Deploy to staging: npm run deploy:staging"
echo "4. Deploy to production: npm run deploy:production"
echo ""
echo -e "${YELLOW}⚠️  Remember to update production environment after deployment!${NC}"