name: VoiceFly Enterprise CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Health Check & Validation
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate Cache Key
        id: cache-key
        run: echo "key=voicefly-${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: npm ci

      - name: Run Health Check
        run: chmod +x scripts/maintenance/health-check.sh && ./scripts/maintenance/health-check.sh

  # Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint Code
        run: npm run lint

      - name: Type Check
        run: npm run type-check

      - name: Security Scan
        run: npm audit --audit-level moderate

      - name: Check for Secrets
        run: |
          if grep -r "sk_" . --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --exclude-dir=node_modules; then
            echo "‚ùå Found potential secrets in code!"
            exit 1
          fi
          echo "‚úÖ No secrets detected in code"

  # Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: health-check
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test
              ;;
            "integration")
              npm run test:integration
              ;;
            "e2e")
              npm run test:e2e
              ;;
          esac

      - name: Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [health-check, code-quality, test-suite]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build All Packages
        run: npm run build

      - name: Package Build Artifacts
        run: |
          mkdir -p build-artifacts
          cp -r apps/*/dist build-artifacts/ 2>/dev/null || true
          cp -r apps/*/.next build-artifacts/ 2>/dev/null || true
          cp -r packages/*/dist build-artifacts/ 2>/dev/null || true

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: build-artifacts/
          retention-days: 30

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: build-artifacts/

      - name: Run Performance Tests
        run: |
          echo "üöÄ Running performance benchmarks..."
          # Add performance testing commands here
          echo "‚úÖ Performance tests completed"

  # Security Scan
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.voicefly.ai
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: build-artifacts/

      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add staging deployment commands here
          # ./scripts/deploy/staging.sh
          echo "‚úÖ Staging deployment completed"

      - name: Run Smoke Tests
        run: |
          echo "üß™ Running smoke tests on staging..."
          # Add smoke test commands here
          echo "‚úÖ Smoke tests passed"

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://voicefly.ai
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: build-artifacts/

      - name: Create Production Backup
        run: |
          echo "üì¶ Creating production backup..."
          # Add backup creation commands here
          echo "‚úÖ Production backup created"

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add production deployment commands here
          # ./scripts/deploy/production.sh
          echo "‚úÖ Production deployment completed"

      - name: Run Production Health Check
        run: |
          echo "üè• Running production health check..."
          # Add production health check commands here
          echo "‚úÖ Production health check passed"

      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ VoiceFly Enterprise deployed to production!
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # Post-deployment Monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')
    steps:
      - name: Monitor System Health
        run: |
          echo "üìä Starting post-deployment monitoring..."
          sleep 60  # Wait 1 minute for services to stabilize
          # Add monitoring setup commands here
          echo "‚úÖ Monitoring setup completed"

      - name: Update Status Page
        run: |
          echo "üì¢ Updating status page..."
          # Add status page update commands here
          echo "‚úÖ Status page updated"